---
    - name: Parse JSON input
      set_fact:
        topology_descriptor: "{{ topology_desc | to_json}}"

    - name: Check if topology is valid
      fail:
        msg: "Topology is not valid. Deployment cannot proceed."
      when: not topology_validity
    
    - name: Print topology
      debug:
        var: topology_descriptor

    - name: Calculate required number of VMs
      set_fact:
        num_clusters: "{{ topology_descriptor.cluster_list | length }}"
        num_nodes: "{{ topology_descriptor.cluster_list | map(attribute='number_of_nodes') | sum }}"
        one_doc_enabled: "{{ topology_descriptor.one_doc_enabled | bool }}"
        together_root_cluster: "{{ topology_descriptor.together_root_cluster | bool }}"

    - name: Verify if flag one_doc_enabled
      set_fact:
        plus_one: "{{ 1 if not one_doc_enabled and not together_root_cluster else 0 }}"
        
    - name : Print number of clusters and nodes
      debug:
        msg: "Number of clusters: {{ num_clusters }}, Number of nodes: {{ num_nodes }}, Plus one: {{ plus_one }}"

    - name: Calculate total number of VMs
      set_fact:
        total_vms: "{{ (num_clusters + num_nodes + plus_one) | int}}"
    
    - name: Print total number of VMs
      debug:
        msg: "Total number of VMs: {{ total_vms }}"

    - name: Find available VMs in cmvm_pool
      add_host:
        name: "{{ item }}"
        groups: available_vms
      loop: "{{ groups['cmvm_pool'] | difference(groups['busy_vms'] | default([])) }}"
      when: inventory_hostname not in groups['busy_vms'] | default([])
      register: available_vm_list

    - name: Ensure enough available VMs
      fail:
        msg: "Not enough available VMs in cmvm_pool. Required: {{ total_vms }}, Available: {{ available_vm_list.results | length }}"
      when: available_vm_list.results | length < total_vms

    - name: Tag selected VMs
      set_fact:
        selected_vms: "{{ available_vm_list.results | map(attribute='item') | list }}"

    - name: Tag VMs with roles
      add_host:
        name: "{{ selected_vms[item.0] }}"
        groups: deployed_vms
        vm_role: "{{ item.1 }}"
      loop: "{{ (['root'] + ['cluster_' ~ i for i in range(2, num_clusters+1)] + ['worker_' ~ i for i in range(1, num_nodes+1)]) | enumerate }}"

    - name: Create new group with timestamp
      set_fact:
        deploy_group_name: "deploy_{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}"

    - name: Add selected VMs to new deploy group
      add_host:
        name: "{{ item }}"
        groups: "{{ deploy_group_name }}"
      loop: "{{ groups['deployed_vms'] }}"

    - name: Mark VMs as busy
      set_fact:
        busy_vms: "{{ (groups['busy_vms'] | default([])) + selected_vms }}"
