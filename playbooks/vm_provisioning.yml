---
- name: Parse JSON input
  set_fact:
    topology_descriptor: "{{ topology_desc | to_json}}"

- name: Check if topology is valid
  fail:
    msg: "Topology is not valid. Deployment cannot proceed."
  when: not topology_validity

- name: Print topology
  debug:
    var: topology_descriptor

- name: Calculate required number of VMs
  set_fact:
    num_clusters: "{{ topology_descriptor.cluster_list | length }}"
    num_nodes: "{{ topology_descriptor.cluster_list | map(attribute='number_of_nodes') | sum }}"
    one_doc_enabled: "{{ topology_descriptor.one_doc_enabled | bool }}"
    together_root_cluster: "{{ topology_descriptor.together_root_cluster | bool }}"

- name: Verify if flag one_doc_enabled
  set_fact:
    plus_one: "{{ 1 if not one_doc_enabled and not together_root_cluster else 0 }}"

- name: Print number of clusters and nodes
  debug:
    msg: "Number of clusters: {{ num_clusters }}, Number of nodes: {{ num_nodes }}, Plus one: {{ plus_one }}"

- name: Calculate total number of VMs
  set_fact:
    total_vms: "{{ (num_clusters | int) + (num_nodes | int) + (plus_one | int) }}"

- name: Print total number of VMs
  debug:
    msg: "Total number of VMs: {{ total_vms }}"

- name: Inspect machine groups
  debug:
    msg: "Machine groups: {{ groups }}"

- name: Find available VMs in cmvm_pool
  add_host:
    name: "{{ item }}"
    groups: busy_vms
  loop: "{{ groups['cmvm_pool'] | default([]) }}"
  register: available_vm_list

- name: Ensure enough available VMs
  fail:
    msg: "Not enough available VMs in cmvm_pool. Required: {{ total_vms }}, Available: {{ available_vm_list.results | length }}"
  when: (available_vm_list.results | length) < (total_vms | int)

- name: Reserve VMs
  set_fact:
    reserved_vms: "{{ groups['busy_vms'][:total_vms|int] }}"
  when: (available_vm_list.results | length) >= (total_vms | int)


- name: Get AWX API token
  uri:
    url: "{{ awx_api_url }}/api/v2/users/1/personal_tokens/"
    method: POST
    body_format: json
    body:
      description: "Token for automation"
    headers:
      Content-Type: "application/json"
      Authorization: "Basic {{ (awx_username ~ ':' ~ awx_password) | b64encode }}"
    status_code: 201
  register: awx_token_response
  no_log: false

- name: Set AWX API token
  set_fact:
    awx_api_token: "{{ awx_token_response.json.token }}"

- name: Set AWX credentials
  set_fact:
    awx_auth: "Bearer {{ awx_api_token }}"

- name: Get inventory ID
  uri:
    url: "{{ awx_api_url }}/api/v2/inventories/?name=CMVM"
    method: GET
    headers:
      Authorization: "{{ awx_auth }}"
    validate_certs: no
  register: inventory_response

- name: Debug inventory response
  debug:
    var: inventory_response

- name: Set inventory ID
  set_fact:
    inventory_id: "{{ inventory_response.json.results[0].id }}"

- name: Update AWX inventory to reserve VMs
  uri:
    url: "{{ awx_api_url }}/api/v2/inventories/{{ inventory_id }}/hosts/"
    method: POST
    headers:
      Authorization: "{{ awx_auth }}"
      Content-Type: "application/json"
    body_format: json
    body:
      name: "{{ item }}"
      groups: ["reserved_vms"]
    validate_certs: no
  loop: "{{ reserved_vms }}"
  register: update_response
  until: update_response.status == 201
  retries: 5
  delay: 2

- include_tasks: github_results.yml
  vars:
    topology_desc: "{{ topology_descriptor }}"
    result: "Not enough available VMs in cmvm_pool. Required: {{ total_vms }}, Available: {{ available_vm_list.results | length }}"
  when: (available_vm_list.results | length) < (total_vms | int)
