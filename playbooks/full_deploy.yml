- name: Execute Full Deploy template
  hosts: localhost
  gather_facts: false
  vars:
    repo: "https://github.com/TheDarkPyotr/ansible-tests"
    branch: "main"  
  tasks:
    - name: Print group assignments for verification
      debug:
        msg: |
          group_root_full: {{ group_root_full }}
          group_clusters_full: {{ group_clusters_full }}
          group_workers_full: {{ group_workers_full }}

    - name: Print the parsed topology data
      debug:
        msg: "{{ topology_desc }}"

    - name: Prepare JSON string for the Python script
      set_fact:
        json_input: "{{ {'topology_descriptor': topology_desc, 'group_clusters_full': group_clusters_full, 'group_workers_full': group_workers_full } | to_json }}"

    - include_tasks: support_execution.yml
      vars:
        script_name: "combination.py"
        script_args: "{{ json_input }}"


    - name: Set topology_desc as JSON
      set_fact:
        topology_desc: "{{ topology_desc | to_json }}"

    - name: Set facts for cluster and worker associations
      set_fact:
        clusters: "{{ topology_desc.topology_descriptor.cluster_list }}"

    - name: Set cluster IDs
      set_fact:
        cluster_ids: "{{ topology_desc.topology_descriptor.cluster_list | map(attribute='cluster_number') | list }}"

    - name: Cast num_clusters to an integer
      set_fact:
        num_clusters_int: "{{ num_clusters | int }}"

    - name: Set cluster host ranges
      set_fact:
        cluster_host_ranges: >
          {{ dict(cluster_ids | zip(reserved_hosts[1:(1 | int + (num_clusters_int | int))]) | list) }}
      register: cluster_host_ranges

    - name: Set worker map
      set_fact:
        worker_map: "{{ hostvars['localhost'].script_result }}"
      register: worker_map

    - name: Set cluster map
      set_fact:
        cluster_map: "{{ cluster_host_ranges.ansible_facts.cluster_host_ranges }}"
      register: cluster_map

    - name: Print the cluster and worker associations
      debug:
        msg: |
          Cluster Host Map: {{ cluster_host_ranges.ansible_facts.cluster_host_ranges }}
          Worker Map: {{ worker_map }}




############# Deploy 3-tier components          
- name: Deploy root component for full topology
  hosts: "{{ group_root_full }}"
  vars:
    repo: "{{ oak_repo_link }}"
    path: "{{ oak_repo_path }}"
    branch: "{{ oak_repo_version }}"
#  roles:
#    - ensure-oakestra-repo-is-cloned
#    - run-root
  tasks:
    - name: Set environment variables for deployment root
      set_fact:
        cluster_map: "{{ hostvars['localhost'].cluster_map.ansible_facts.cluster_map }}"
        worker_map: "{{ hostvars['localhost'].worker_map.ansible_facts.worker_map }}"

    - name: Print the cluster and worker IPs at root 
      debug:
        msg: |
          Cluster IPs: "{{ cluster_map }}"
          Worker IPs: "{{ worker_map }}"


- name: Deploy cluster components for full topology
  hosts: "{{ group_clusters_full }}"
#  roles:
#    - role: ensure-oakestra-repo-is-cloned
#      vars:
#        repo: "{{ oak_repo_link }}"
#        path: "{{ oak_repo_path }}"
#        branch: "{{ oak_repo_version }}"
#    - role: run-cluster
  tasks:
    - name: Set environment variables for deployment cluster
      set_fact:
        cluster_map: "{{ hostvars['localhost'].cluster_map.ansible_facts.cluster_map }}"
        worker_map: "{{ hostvars['localhost'].worker_map.ansible_facts.worker_map }}"

    - name: Print the cluster and worker IPs at cluster
      debug:
        msg: |
          Cluster IPs: "{{ cluster_map }}"
          Worker IPs: "{{ worker_map }}"

    
- name: Deploy worker components for full topology
  hosts: "{{ group_workers_full }}"
#  roles:
#    - setup-net-manager
#    - setup-node-engine
#  vars:
#    repo: "{{ oak_repo_link }}"

  tasks:
    - name: Set environment variables for deployment node
      set_fact:
        cluster_map: "{{ hostvars['localhost'].cluster_map.ansible_facts.cluster_map}}"
        worker_map: "{{ hostvars['localhost'].worker_map.ansible_facts.worker_map }}"

    - name: Print the cluster and worker IPs at node
      debug:
        msg: |
          Cluster IPs: "{{ cluster_map }}"
          Worker IPs: "{{ worker_map }}"


    - name: Print cluster_node_map
      debug:
        msg: "{{ cluster_map }}"
      
    - name: Determine cluster for current worker and print message
      debug:
        msg: >
          {% set cluster_id = worker_map | dict2items | selectattr('value', 'contains', inventory_hostname) | map(attribute='key') | first %}
          {% if cluster_id is defined %}
            {% set cluster_node_name = cluster_map[(cluster_id | int )] %}
            Hey, I'm host {{ inventory_hostname }} and I'm inside cluster of node {{ cluster_node_name }}
          {% else %}
            Cluster information not found for host {{ inventory_hostname }}
          {% endif %}
    - name: Set cluster id for worker
      set_fact:
        cluster_id: "{{ worker_map | dict2items | selectattr('value', 'contains', inventory_hostname) | map(attribute='key') | first }}"

    - name: Set cluster node name for worker
      set_fact:
        cluster_node_name: "{{ cluster_map[(cluster_id | int)] }}"

    - name: Retrieve IP address of cluster node
      set_fact:
        cluster_node_ip: "{{ hostvars[cluster_node_name].ansible_host | default(hostvars[cluster_node_name].ansible_ssh_host, 'IP address not found') }}"

    - name: Fail if cluster_node_ip is not found
      fail:
        msg: "IP address not found for cluster node {{ cluster_node_name }}"
      when: cluster_node_ip == "IP address not found"

    
    - name: Print cluster node IP for worker
      debug:
        msg: "Cluster node IP for worker {{ inventory_hostname }} is {{ cluster_node_ip }}"

  roles:
    - setup-net-manager
    - setup-node-engine
  vars:
    clusterIP: "{{ cluster_node_ip }}"
    nodeIP: "{{ ansible_host }}"
