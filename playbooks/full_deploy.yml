- name: Execute Full Deploy template
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Print group assignments for verification
      debug:
        msg: |
          group_root_full: {{ group_root_full }}
          group_clusters_full: {{ group_clusters_full }}
          group_workers_full: {{ group_workers_full }}

    - name: Print the parsed topology data
      debug:
        msg: "{{ topology_desc }}"

    - name: Set topology_desc as JSON
      set_fact:
        topology_desc: "{{ topology_desc | to_json }}"

    - name: Set facts for cluster and worker associations
      set_fact:
        clusters: "{{ topology_desc.topology_descriptor.cluster_list }}"

    - name: Set cluster IDs
      set_fact:
        cluster_ids: "{{ topology_desc.topology_descriptor.cluster_list | map(attribute='cluster_number') | list }}"

    - name: Cast num_clusters to an integer
      set_fact:
        num_clusters_int: "{{ num_clusters | int }}"

    - name: Set cluster host ranges
      set_fact:
        cluster_host_ranges: >
          {{ dict(cluster_ids | zip(reserved_hosts[1:(1 | int + (num_clusters_int | int))]) | list) }}
      register: cluster_host_ranges

    - name: Set worker ranges
      set_fact:
        worker_ranges: "{{ reserved_hosts[(1 + (num_clusters | int)):(1 + (num_clusters | int) + (num_nodes | int))] }}"

    - name: Create an empty worker map
      set_fact:
        worker_map: {}

    - name: Associate workers with clusters
      set_fact:
        worker_map: "{{ worker_map | combine({ (item.cluster_number): workers }) }}"
      loop: "{{ clusters }}"
      vars:
        start_index: "{{ (1 | int + num_clusters_int | int) + ((item.cluster_number | int - 1 | int) * item.number_of_nodes | int) }}"
        end_index: "{{ (start_index | int) + (item.number_of_nodes | int) }}"
        workers: "{{ reserved_hosts[(start_index | int ):(end_index | int)] }}"
      register: worker_map

    - name: Print the cluster and worker associations
      debug:
        msg: |
          Cluster Host Map: {{ cluster_host_ranges }}
          Worker Map: {{ worker_map }}

############# Deploy 3-tier components          
- name: Deploy root component for full topology
  hosts: "{{ group_root_full }}"
  vars:
    repo: "{{ oak_repo_link }}"
    path: "{{ oak_repo_path }}"
    branch: "{{ oak_repo_version }}"
#  roles:
#    - ensure-oakestra-repo-is-cloned
#    - run-root
  tasks:
    - name: Set environment variables for deployment root
      set_fact:
        cluster_host_ranges: "{{ hostvars['localhost'].cluster_host_ranges.ansible_facts.cluster_host_ranges }}"
        worker_map: "{{ hostvars['localhost'].worker_map.results[0].ansible_facts.worker_map }}"

    - name: Print the cluster and worker IPs at root 
      debug:
        msg: |
          Cluster IPs: "{{ cluster_host_ranges }}"
          Worker IPs: "{{ worker_map }}"


- name: Deploy cluster components for full topology
  hosts: "{{ group_clusters_full }}"
#  roles:
#    - role: ensure-oakestra-repo-is-cloned
#      vars:
#        repo: "{{ oak_repo_link }}"
#        path: "{{ oak_repo_path }}"
#        branch: "{{ oak_repo_version }}"
#    - role: run-cluster
  tasks:
    - name: Set environment variables for deployment cluster
      set_fact:
        cluster_host_ranges: "{{ hostvars['localhost'].cluster_host_ranges.ansible_facts.cluster_host_ranges }}"
        worker_map: "{{ hostvars['localhost'].worker_map.results[0].ansible_facts.worker_map }}"


    - name: Print the cluster and worker IPs at cluster
      debug:
        msg: |
          Cluster IPs: "{{ cluster_host_ranges }}"
          Worker IPs: "{{ worker_map }}"
    
- name: Deploy worker components for full topology
  hosts: "{{ group_workers_full }}"
#  roles:
#    - setup-net-manager
#    - setup-node-engine
  vars:
    repo: "{{ oak_repo_link }}"

  tasks:
    - name: Set environment variables for deployment node
      set_fact:
        cluster_host_ranges: "{{ hostvars['localhost'].cluster_host_ranges.ansible_facts.cluster_host_ranges }}"
        worker_map: "{{ hostvars['localhost'].worker_map.results[0].ansible_facts.worker_map }}"


    - name: Print the cluster and worker IPs at node 
      debug:
        msg: |
          Cluster IPs: "{{ cluster_host_ranges }}"
          Worker IPs: "{{ worker_map }}"
