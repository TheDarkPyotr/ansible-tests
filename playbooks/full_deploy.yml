- name: Execute Full Deploy template
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Fail if it's not a full deploy topology
      fail:
        msg: "Deployment is skipped because is not a full topology."
      when: deploy_1doc or together_root_cluster

    - name: Print group assignments for verification
      debug:
        msg: |
              group_root_full: {{ group_root_full }}
              group_clusters_full: {{ group_clusters_full }}
              group_workers_full: {{ group_workers_full }}

    - name: Print the parsed topology data
      debug:
        msg: "{{ topology_desc }}"

    - name: Set facts for cluster and worker associations
      set_fact:
        clusters: "{{ topology_desc.topology_descriptor.cluster_list }}"
    - name: Set cluster IDs
      set_fact:
        cluster_ids: "{{ topology_desc.topology_descriptor.cluster_list | map(attribute='cluster_number') | list }}"
    - name: Cast num_clusters to an integer
      set_fact:
        num_clusters_int: "{{ num_clusters | int }}"
    - name: Set cluster host ranges 
      set_fact:
        # Create the cluster host ranges dictionary
        cluster_host_ranges: >
          {{
            dict(
              cluster_ids | zip(reserved_hosts[1:(1 + num_clusters_int)]) | list
            )
          }}

    - name: Set worker ranges
      set_fact:
        worker_ranges: "{{ reserved_hosts[(1 + (num_clusters | int)):(1 + (num_clusters | int) + (num_nodes | int))] }}"

    - name: Create mappings for clusters and workers
      set_fact:
        # Map clusters to hosts
        cluster_host_map: "{{ cluster_host_ranges | dict2items | map('combine', {'value': {'cluster': item.value, 'hosts': []}}) | items2dict }}"
        
        # Map workers to clusters
        worker_map: {}
        
    - name: Associate workers with clusters
      set_fact:
        # Associate each worker to the appropriate cluster based on the cluster's node count
        worker_map: "{{ worker_map | combine({(item.cluster_number): item.workers}) }}"
      loop: "{{ clusters }}"
      vars:
        workers: "{{ reserved_hosts[(start_index):(start_index + item.number_of_nodes)] }}"
        start_index: "{{ (1 + (num_clusters | int)) + (num_nodes | int) }}"
    
    - name: Print the cluster and worker associations
      debug:
        msg: |
          Cluster Host Map: {{ cluster_host_map }}
          Worker Map: {{ worker_map }}

- name: Deploy root component for full topology
  hosts: "{{ group_root_full }}"
  vars:
    repo: "{{ oak_repo_link }}"
    path: "{{ oak_repo_path }}"
    branch: "{{ oak_repo_version }}"
  roles:
    - ensure-oakestra-repo-is-cloned
    - run-root

- name: Deploy cluster components for full topology
  hosts: "{{ group_clusters_full }}"
  roles:
    - role: ensure-oakestra-repo-is-cloned
      vars:
        repo: "{{ oak_repo_link }}"
        path: "{{ oak_repo_path }}"
        branch: "{{ oak_repo_version }}"
    - role: run-cluster
- name: Deploy worker components for full topology
  hosts: "{{ group_workers_full }}"
  roles:
    - setup-net-manager
    - setup-node-engine
  vars:
    repo: "{{ oak_repo_link }}"
